/******************************************************************************/
/* notes                                                                      */
/******************************************************************************/

/*
- direction vector_xy (= vector_xy)
	"dir"
	Simply the direction to which the player looks.
	It is a line.

- player position (= vector_xy)
	"pos"
	Simply a single point in the map.
	It is a point in front of the "camera plane".

- camera plane (= vector_xy)
	"plane"
	Not really a plane, but a line.
	Is always perpendicular to the "direction vector_xy".
	It is the horizontal line you would reach if you look straight ahead.
	It represents the computer screen. The 2D window of your game (e.g. 480x360)
	By definition (?) you always touch exactly the center of the camera plane.

- ray:
	A line that starts at the player position and goes through the "camera plane".

- ray direction (= vector_xy):
	"rayDir"
	The x and y components are used by the digitalDifferentialAnalysis algorithm.
	"direction vector_xy" + part of the "camera plane"
	Here, part of the "camera plane" is expressed in terms of proportion of the
	camera plane length, and is the distance between A and B, where..
	A: Where the direction vector_xy crosses the camera plane (i.e. its center)
	B: Where the ray vector_xy crosses the camera plane
	
	Example:
	                    part of camera plane
	                    (about 1/3 of right half of camera plane)
	                              |
	                              |    intersection around 1/3 of camera plane
	                            | |   /
	                            | V  /
	camera plane -> ------------|---/-------- <- ray vector_xy intersects direction vector_xy
	                            |  /
	        direction vector_xy -> | / <- ray vector_xy
	                            |/
	                            P <- player position vector_xy

	e.g. The ray of interest crosses the camera plane about 1/3 of the camera
	plane's vector_xy, assuming you would start at the camera plane's center.
	The ray direction would then be computed as follows:
	ray of interest = ("direction vector_xy" + (1/3 * "camera plane vector_xy"))

- field of vision (fov)
	Refers to the observable world. It is often expressed in degrees.
	The higher the fov, the more of the world is visible.

	Some insights regardins fov:
	- If the direction vector_xy and the camera plane (measured from its center) have
	the same length, then the fov is always 90 degrees.

	- If the direction vector_xy is much longer than the camera plane (measured from
	its center), then the fov is much narrower than 90 degrees.

	- If the direction vector_xy is much shorter than the camera plane (measured from
	its center), then the fov is much wider than 90 degrees. The max width is
	a theoretical 180 degrees.

- rotation
	If the player rotates, then the camera plane also has to rotate.
	This makes sense, because it is the camera plane that represents your
	computer screen. You want the computer screen to depict images depending
	on where your player is looking at.

	If the player is rotated, you need to rotate the camera plane vector_xy.
	You can rotate a vector_xy by multiplying the vector_xy with the "rotation matrix"

- rotation matrix
	[cos(a) -sin(a)]
	[sin(a)  cos(a)]

	Todo: Add explanations and actual usage example.
*/

#include "./../includes/cub3d.h"



/*
arc tangent = inverse tangent = atan
tangent to degrees? arc tangent
*/

/*

				N

				1
				|
				|
				|
W	-1	--------0-------	1 E
				|
				|
				|
				-1
				S
*/
